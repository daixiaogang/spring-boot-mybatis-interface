<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- 说明： 1、日志级别及文件 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中 例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志， 
		日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名 例如log-level-2013-12-21.0.log 
		其它级别的日志也是如此。 2、文件路径 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。 
		若部署到Tomcat下，则在Tomcat下的logs文件中 3、Appender FILEERROR对应error级别，文件名以log-error-xxx.log形式命名 
		FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名 FILEINFO对应info级别，文件名以log-info-xxx.log形式命名 
		FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名 stdout将日志信息输出到控制上，为方便开发测试使用 -->
	<springProperty scope="context" name="LOG_PATH"
		source="log.path" />

	<!-- 日志记录器，日期滚动记录 -->
	<appender name="FILEINFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文滚动方案 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${LOG_PATH}/InfoLog/%d{yyyy-MM-dd}-%i.log
			</fileNamePattern>
			<!-- 保留除今天外前30天的数据 -->
			<!--<maxHistory>30</maxHistory> -->
			<!-- 每个文件的大小,注：文件大小生效前提文件名称中包含 %i 自增长标识,当文件超出最大值时，会自动生成一个而文件,i+1 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 日志输出格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}
				-%msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
			<level>INFO</level>
		</filter>
	</appender>
	<appender name="ASYNC_FILEINFO" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<!-- <queueSize>${log.queueSize}</queueSize> -->
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="FILEINFO" />
	</appender>


	<!-- 日志记录器，日期滚动记录 -->
	<appender name="ERRORINFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文滚动方案 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${LOG_PATH}/ErrorLog/%d{yyyy-MM-dd}-%i.log
			</fileNamePattern>
			<!-- 保留除今天外前30天的数据 -->
			<!--<maxHistory>30</maxHistory> -->
			<!-- 每个文件的大小,注：文件大小生效前提文件名称中包含 %i 自增长标识,当文件超出最大值时，会自动生成一个而文件,i+1 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 日志输出格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}
				-%msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
			<level>ERROR</level>
		</filter>
	</appender>
	<appender name="ASYNC_ERRORINFO" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<!-- <queueSize>${log.queueSize}</queueSize> -->
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERRORINFO" />
	</appender>


	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!--encoder 默认配置为PatternLayoutEncoder -->
		<encoder>
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L -
				%msg%n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>debug</level>
		</filter>
	</appender>


	<logger name="LOGGERERROR" level="ERROR" additivity="false">
		<appender-ref ref="ASYNC_ERRORINFO" />
	</logger>
	<logger name="LOGGERINFO" level="INFO"
		additivity="false">
		<appender-ref ref="ASYNC_FILEINFO" />
	</logger>

	<!-- 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 -->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="ASYNC_FILEINFO" />
		<!-- <appender-ref ref="ASYNC_ERRORINFO" /> -->
	</root>
</configuration>